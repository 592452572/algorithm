package src.dp.sevenDay;

public class QiPan {
    /**
     * 问题描述：给定一个棋盘，棋盘上初始化有n个棋子，求至少挪动多少次可以得到某个格子上有n个棋子
     * 思路：将节点的x,y信息映射到一个一维列表中，然后使用各个点到其他点的曼哈顿路径最小值
     * 分别得出横纵坐标的值(前提是全部棋子)
     * 如果只想一个格子上有N个棋子，则需使用优先级队列，记录(x[0至n], y[0至n])上的曼哈顿距离
     * 优先级队列 minX1Y1[a, b]表示为，当节点值为(X1,Y1)时，一个节点的曼哈顿最小值为a，两个节点曼哈顿最小值为b
     * 然后通过对比minXNYN上的最小值，就是解
     * 曼哈顿距离= |x1-x2|+|y1-y2|  A（x1,y1） B（x2,y2）
     */
}
