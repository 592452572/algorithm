package src.dp.ninthDay;

public class ArrDp {
    /**
     * 问题描述：给定一个数组，求这个数组中子数组通过自由组装，能组成的数
     * 思路：使用dp
     * 给定一个dp[i][j] 表示0至i-1这个范围，能否得到j这个数
     * 当dp[i+1][j]时，只需将dp[i][j]为true的值复制。为false的值用value = j-arr[i+1],判断dp[i][value]是否为true。是的话可以直接设为true
     */
    /**
     * 问题升级：如果告诉你数组中有一个1，能否更快的得到这些组装的数
     * 思路：能
     * 1.先将数组排好序
     * 2.从第二个元素开始便利，并记录range = 0; range = range+1
     * 2.判断第二个元素 arr[2]-range>1。如果不是，则可组装的数为[1至3],range=range+arr[2]
     * 原理：如果前n个范围为 [1-100]的数都可以组装到，后面加的这个数（例如5）如果减100的值不大于1，则该范围扩大到105
     * 因为101-105的数可以从前面获取（96，97，98，99，100均可由前面获取）
     */
}
